within Grate_Boiler.Components;
package Bed
  extends ClaRa.Basics.Icons.PackageIcons.Components80;

  model Bed_Model "Discretized bed model with n segments in length direction"

    outer ClaRa.SimCenter simCenter;

    parameter Integer n_segments = 10  "number of horizontally discretized fuel bed segments" annotation(Dialog(group="Discretization"));
    //parameter Integer m_segments = 3 "number of vertically discretized fuel bed segments ";

    inner parameter ClaRa.Basics.Media.FuelTypes.BaseFuel fuelModel=simCenter.fuelModel1 "Fuel elemental composition used for combustion";
    inner parameter TILMedia.GasTypes.BaseGas flueGas = simCenter.flueGasModel "Medium to be used as fluegas";

    //__________/ initalization values \________
   parameter ClaRa.Basics.Units.Temperature T_fuel_start = 298.15  "Start temperature in segments" annotation(Dialog(tab="Initialisation"));
   parameter ClaRa.Basics.Units.MassFraction xi_fuel_start[fuelModel.N_c-1]={0.357,0.0429,0.307,0.0,0.0,0.00714}  "Start composition of fuel Nielsen et al" annotation (Dialog(tab="Initialisation"));
   parameter ClaRa.Basics.Units.Temperature T_start_flueGas_out=293.15 "Start temperature at outlet" annotation (Dialog(tab="Initialisation"));
   parameter ClaRa.Basics.Units.Pressure p_start_flueGas_out=1.013e5 "Start pressure at outlet" annotation (Dialog(tab="Initialisation"));
   parameter ClaRa.Basics.Units.Mass m_segment_fuel_start[n_segments] = ones(n_segments)*1 "Start mass" annotation(Dialog(tab="Initialisation"));
   //parameter ClaRa.Basics.Units.Mass m_segment_fuel_start = 1 "Start mass" annotation(Dialog(tab="Initialisation"));

  //  parameter Real epsilon =  0.99  "Ratio of fluegas to total volume";

    //inner parameter ClaRa.Basics.Units.Velocity v_grate= 0.1  "Mean velocity of forward movement";
    parameter ClaRa.Basics.Units.Length length = 1  "Length of bed"  annotation(Dialog(group="Geometry"));
    parameter ClaRa.Basics.Units.Length width = 1  "Width of grate"  annotation(Dialog(group="Geometry"));
    parameter ClaRa.Basics.Units.Length height = 1  "Height of discretisized volumes"  annotation(Dialog(group="Geometry"));

    Bedsegment.Bedsegment_Base bedSegment[n_segments](
      variable_v_grate=true,
      each l_segment=length/n_segments,
      each w_segment=width,
      each h_segment=height,
      alpha_fuel_fluegas=500,
      m_segment_fuel_start=m_segment_fuel_start,
      each h_fuel(start=100),
      each T_fuel_start=T_fuel_start,
      each xi_fuel_start=xi_fuel_start,
      each T_start_flueGas_out=T_start_flueGas_out,
      each p_start_flueGas_out=p_start_flueGas_out,
      redeclare model PressureLoss = Grate_Boiler.Components.Bedsegment.Pressure_Loss.LinearPressureLoss_L2_Grate (Delta_p_nom=1000, m_flow_nom=10),
      redeclare model Pyrolysis = ChemicalReactions.SolidFuelReactionZone,
      redeclare model Charcombustion = CharCombustion.Charcombustion,
      solidFuelReactionZone(xi_CO_conversion=0.5, xi_CO2_conversion=0.25)) annotation (Placement(transformation(extent={{-20,-10},{20,10}})));
                                                                                                                 //{m_segment_fuel_start - (i-1)*m_segment_fuel_start*0.1 for i in 1:n_segments}

    ClaRa.Basics.Interfaces.GasPortIn[n_segments] fluegas_inlet(each Medium=flueGas) annotation (Placement(transformation(extent={{-126,-106},{-114,-94}}),   iconTransformation(extent={{-170.5,-110.5},{-149.5,-89.5}})));
    ClaRa.Basics.Interfaces.GasPortOut[n_segments] fluegas_outlet(each Medium=flueGas) annotation (Placement(transformation(extent={{-126,94},{-114,106}}),
                                                                                                                                        iconTransformation(extent={{-170.5,89.5},{-149.5,110.5}})));
    ClaRa.Basics.Interfaces.Fuel_inlet fuel_inlet(fuelModel=fuelModel) annotation (Placement(transformation(extent={{-306,-6},{-294,6}}), iconTransformation(extent={{-310,-10},{-290,10}})));
    ClaRa.Basics.Interfaces.Fuel_outlet fuel_outlet(fuelModel=fuelModel) annotation (Placement(transformation(extent={{294,-6},{306,6}}), iconTransformation(extent={{290,-10},{310,10}})));
    ClaRa.Basics.Interfaces.HeatPort_b[n_segments] heatPort_bottom annotation (Placement(transformation(extent={{10,-110},{30,-90}}),iconTransformation(extent={{10,-110},{30,-90}})));
    ClaRa.Basics.Interfaces.HeatPort_a[n_segments] heatPort_top annotation (Placement(transformation(extent={{10,90},{30,110}}),iconTransformation(extent={{10,90},{30,110}})));

    Modelica.Blocks.Interfaces.RealInput v_grate_input annotation (Placement(transformation(extent={{-330,78},{-290,118}})));
    ClaRa.Components.Utilities.Blocks.RealInputMultiplyer realInputMultiplyer(N=n_segments) annotation (Placement(transformation(extent={{-182,6},{-162,26}})));
  equation

    connect(bedSegment[n_segments].fuel_outlet, fuel_outlet) annotation (Line(
        points={{20,0},{300,0}},
        color={27,36,42},
        pattern=LinePattern.Solid,
        thickness=0.5));

    connect(fuel_inlet, bedSegment[1].fuel_inlet) annotation (Line(
        points={{-300,0},{-20,0}},
        color={27,36,42},
        thickness=0.5));

    if n_segments > 1 then
      for i in 2:n_segments loop
        connect(bedSegment[i - 1].fuel_outlet, bedSegment[i].fuel_inlet);
      end for;
    end if;

  for i in 1:n_segments loop
    connect(fluegas_inlet[i], bedSegment[i].fluegas_inlet) annotation (Line(
        points={{-120,-100},{-120,-26},{0,-26},{0,-10}},
        color={118,106,98},
        thickness=0.5));
    connect(bedSegment[i].fluegas_outlet, fluegas_outlet[i]) annotation (Line(
        points={{0,10},{0,38},{-120,38},{-120,100}},
        color={118,106,98},
        thickness=0.5));
    connect(heatPort_bottom[i], bedSegment[i].heatPort_bottom) annotation (Line(
        points={{20,-100},{20,-26},{6,-26},{6,-10}},
        color={167,25,48},
        thickness=0.5));
    connect(bedSegment[i].heatPort_top, heatPort_top[i]) annotation (Line(
        points={{6,10},{6,38},{20,38},{20,100}},
        color={167,25,48},
        thickness=0.5));

  end for;

    connect(v_grate_input, realInputMultiplyer.Signal) annotation (Line(points={{-310,98},{-252,98},{-252,16},{-183.8,16}}, color={0,0,127}));
    connect(realInputMultiplyer.y, bedSegment.v_grate_variable) annotation (Line(points={{-161,15.95},{-42,15.95},{-42,9.6},{-20.8,9.6}}, color={0,0,127}));
    annotation (Icon(coordinateSystem(extent={{-300,-100},{300,100}}), graphics={Bitmap(
            extent={{-302,-100},{302,100}},
            imageSource=
                "",
            fileName="modelica://ClaRa_Dev/Resources/Images/Bed_Icon2.png")}),                        Diagram(coordinateSystem(extent={{-300,-100},{300,100}})));
  end Bed_Model;
end Bed;
